Wie lässt sich der Begriff Datenbank definieren?;Eine Datenbank ist eine integrierte Ansammlung von Daten, die allen Benutzern eines Anwendungsbereiches als gemeinsame Basis aktueller Information dient.
Was ist ein DBMS?;Das DBMS ist ein Softwaresystem das es ermöglicht, eine Datenbank zu definieren, Daten zu speichern, zu verändern und zu löschen, sowie Anfragen an die Datenbank zu stellen. Das DBMS isoliert also die Datenbank von den Anwendungsprogrammen
Woraus setzt sich ein Datenbanksystem (DBS) zusammen?;Datenbank und Datenbanksoftware bilden zusammen das Datenbanksystem (DBS).
Die traditionelle Verarbeitung großer Datenmengen mittels Dateisystemen führt zu schwerwiegenden Problemen. Nennen Sie vier davon!;* Redundanz: Da die Daten jeweils speziell für bestimmte Anwendungen entworfen werden, werden dieselben Daten in verschiedenen Dateien wieder auftauchen (z.B. Namen, Adressen). * Inkonsistenz: Die Konsistenz der Daten (d.h. die logische Übereinstimmung der Datei-Inhalte) kann nur schwer gewährleistet werden. * Daten-Programm-Abhängigkeit: Ändert sich der Aufbau einer Datei oder ihrer Organisationsform, so müssen darauf basierende Programme geändert werden. * Inflexibilität: Da die Daten nicht in ihrer Gesamtheit, sondern nur anwendungs-bezogen gesehen werden, ist es in vielen Fällen sehr kompliziert, neue Anwendungen oder Auswertungen vorhandener Daten zu realisieren.
Was bedeutet Datenunabhängigkeit?;Die Trennung von Anwendungsprogramm und Daten, welche durch das DBMS erreicht wird. Das DBMS übergibt dem Anwendungsprogramm nicht mehr ganze Sätze, so wie sie im Speicher liegen, sondern genau die vom Anwendungsprogramm benötigten Datenelemente. Veränderungen des Satzaufbaus oder der internen Organisation der Daten bleiben somit für das Anwendungsprogramm unsichtbar, so dass bisher laufende Programme von solchen Änderungen nicht betroffen werden.
Warum ist Integrität ein Vorteil eines DBS und was ist damit gemeint?;Integrität der Daten bedeutet ganz allgemein Korrektheit und Vollständigkeit der abgespeicherten Daten. Die zentrale Verwaltung der Daten durch das DBMS ermöglicht es, bei Änderung von Daten Kontrollroutinen einzuschalten oder von Zeit zu Zeit mit Hilfe spezieller Prüfprogramme nach Integritätsverletzungen zu suchen. In Dateisystemen ist der Anwendungspro-grammierer dafür verantwortlich, geeignete Prüfungen in seine Programme einzubauen, die verhindern, dass falsche Daten abgespeichert werden.
Nennen Sie acht Vorteile der Datenbank-Philosophie ggü. konventionellen Dateisystemen.;* Gemeinsame Basis für alle Anwendungen, * Redundanz entfällt: Wo sie nützlich ist, wird sie durch das DBMS kontrolliert,* Konsistenzprobleme entfallen wg. fehlender Redundanz, * Vereinfachte Anwendungsprogrammierung, da Programmierer sich nicht mit Organisation der ihn interessierenden Eigenschaften der Daten auf den Speichern kennen muss, * Abhängigkeit zwischen Programmen und Daten wird reduziert, Änderungen in der Datenorganisation führen nicht zu Änderungen der Anwendungsprogramme, * Mehr Flexibilität für die Datenauswertung durch das DBS: Es ist einfacher, neue Anwendungen zu programmieren oder ungeplante Anfragen zu beantworten. * Das DBS kann zentral die Korrektheit von Daten überprüfen. * Das Datenbanksystem kann zentral Mechanismen zur Wiederherstellung einer korrekten Datenbank nach dem Auftreten von Fehlern bereitstellen.
Welche drei Datenebenen müssen unterschieden werden bei einem DBS? Erläuterung!;* Logische Gesamtsicht: Beschreibung aller Daten auf logischer Ebene in Form von Informationseinheiten und deren Beziehungen zueinander. * Interne Sicht: Organisation der Daten auf dem Speicher, sodass Zugriffsanforderungen verschiedener Benutzer möglichst effizient erfüllt werden können. * Externe Sichten: Darstellung der Daten, wie es für Benutzer wünschenswert oder natürlich ist.
Was leistet das DBMS in Bezug auf externe Sichten, interne Sicht und logische Gesamtsicht?;Die notwendige Umsetzung von einer externen Sicht in die logische Gesamtsicht und von dort in die interne Sicht.
Erklären Sie die Architektur eines Datenbanksystems; Datenbeschreibungssprachen beschreiben Modelle der Datenwelt in einer für das DBMS verständlichen Form. Beschreibung nennt sich Schema * Es gibt drei Schemata: Externe Schemata, konzeptuelles Schema (Beschreibung der logischen Gesamtsicht) und internes Schema. * Transformationsregeln definieren Abbildungen zwischen den Ebenen. * DBMS nimmt Benutzeraufträge entgegen, welche in Begriffen des externen Schemas formuliert sind. * DBMS stellt über Datenebenen hinweg fest, welche gespeicherten Daten für die Bearbeitung des Benutzerauftrags benötigt werden. * Speicherzugriffe erfolgen über das Betriebssystem
Was beschreibt das konzeptuelle Modell?;Gesamtheit der Daten, die in der Datenbank verwaltet werden, inkl. aller wesentlichen Beziehungen zwischen den Daten. * Bedingungen für die Daten (Integritätsbedingungen). * Vorschriften für das Ändern von Daten.
Wozu dient die Datenmanipulationssprache heute verbreiteter DBS?;Zugriff auf Datenbank mit Operationen wie speichern, lesen, löschen und modifizieren.
Welche vier Vorteile gewinnt man mit dem konzeptuellen Modell?;* Es stellt einen stabilen Bezugspunkt für alle Anwendungen dar. * Es stellt eine einheitliche Dokumentation wesentlicher Aspekte des Unternehmens dar. * Es bietet die Möglichkeit, den Gebrauch der Daten an zentraler Stelle zu kontrollieren. * Es schafft die wesentlichen Voraussetzung für Datenunabhängigkeit der Anwendungsprogramme.
Womit wird das konzeptuelle Modell beschrieben?;Es wird mit Hilfe einer geeigneten Datenbeschreibungssprache (DDL) im konzeptuellen Schema beschrieben.
Welche 9 Schritte laufen ab, wenn ein Anwendungsprogramm ein Objekt lesen will?;1. Das DBMS empfängt den Befehl des Anwendungsprogrammes, ein bestimmtes Objekt eines externen Modells zu lesen. 2. Das DBMS holt sich die benötigten Definitionen des entsprechenden Objekttyps aus dem zugehörigen externen Schema. 3. Mit Hilfe der Transformationsregeln externes/konzeptuelles Schema stellt das DBMS fest, welche konzeptuellen Objekte und Beziehungen benötigt werden. 4. Mit Hilfe der Transformationsregeln konzeptuelles/internes Schema stellt das DBMS fest, welche physischen Objekte zu lesen sind, es ermittelt die auszunutzenden Zugriffspfade. 5. Das DBMS übergibt dem Betriebssystem die Nummern der zu lesenden Speicherblöcke. 6. Das Betriebssystem übergibt die verlangten Blöcke an das DBMS in einem Systempuffer. 7. Mit Hilfe der Transformationsregeln stellt das DBMS aus den vorhandenen physischen Sätzen das verlangte externe Objekt zusammen. 8. Das DBMS übergibt das externe Objekt dem Anwendungsprogramm in seinen Arbeitsspeicher. 9. Das Anwendungsprogramm verarbeitet die vom DBMS übergebenen Daten.
Was bedeutet Binden und was kann dabei passieren?;Möchte ein Anwendungsprogramm ein Objekt lesen, muss der Befehl, der sich auf das externe Objekt bezieht ersetzt werden durch Befehle, die sich auf das konzeptuelle Modell und dann auf das interne Modell beziehen. Die Daten des Anwendungsprogramms sind dann an das konzeptuelle Modell/interne Modell gebunden. * Problem: Ändert sich nach dem Binden des Anwendungsprogramms das interne Modell, arbeitet das Anwendungsprogramm mit fehlerhaften Daten.
Wann findet das Binden statt? Erklären Sie die Unterschiede und Vor-/Nachteile.;1. Binden zur Übersetzungszeit 2. Binden zum Zeitpunkt des Zugriffs auf die Daten (Laufzeit) 1. Nachteil: Programm muss neu übersetzt werden, wenn sich am konzeptuellen/internen Modell etwas ändert. 1. Vorteil: Weniger aufwändiges Verfahren. 2. Vorteil: Größtmögliche Unabhängigkeit d. Anwendungsprogramms von der Organisation der Datenbank. 2. Nachteil: Sehr zeitaufwendiges/teures Verfahren, da Bindevorgang bei <b>jedem</b> Zugriffswunsch vollständig ablaufen muss.
Welche 6 Aufgaben hat ein DBMS?;* Zugriffswünsche von Anwendungsprogrammen ausführen * Datendefinition: DBMS muss Datendefinition (externe Schemata, konzeptuelle Schema, internes Schema, zugehörige Transformationsregeln) in den zugehörigen DDLs akzeptieren und interpretieren können. *DBMS muss auch Anfragen über Definition der Daten (Meta-Daten) in der DB beantworten können (Welche Objekttypen gibt es, was sind die Attribute, etc.) * Integrität der Datenbank: Integritätsverletzungen müssen durch das DBMS verhinert werden. * Datensicherung/Recovery: Nach Fehler muss DBMS in der Lage sein, die DB wieder in einen konsistenten Zustand zu versetzen (Plattenfehler, Systemzusammenbruch, Abbrüche von Anwendungsprogrammen). * Koordination gleichzeitig auf der DB arbeitender Benutzer: Parallel arbeitende Programme dürfen sich nicht gegenseitig stören. * Schutz der Daten gegen unberechtigten Zugriff: Alle technische Maßnahmen zum Datenschutz.
Welche weiteren Komponenten kennt ein DBS und welchen Zweck erfüllen sie?;<b>Tools</b> zur Vereinfachung der <b>Entwicklung von Anwendungen auf Datenbanken</b> für Anwendungsprogrammierer/Endnutzer. * <b>Utilities</b> für <b>DB-Administrator</b> Beispiele: Laderoutinen, Statistische Routinen, Routinen zur Fehleranalyse, Routinen zur Reorganisation der Daten auf den Speichern, Kopier- und Archivierungsroutinen * <b>Data Dictionary und Repository</b>: * Data Dictionary hat zwei Funktionen: Es dient dem <b>DBMS zur Speicherung der Daten</b> zur Verwaltung der Datenbank (Schema-Informationen, Sichten, Zugriffsrechte, Informationen zur Optimierung von Anfragen wie etwa Statistiken) und es dient dem <b>Anwendungsprogrammierer</b> zur <b>Suche nach Informationen über gespeicherte Daten</b> und deren Struktur sowie zur <b>Analyse bei Leistungsproblemen</b>. Ist somit eine Datenbank in der Datenbank und kann in gleicher Weise wie die DB abgefragt werden. * Repositories: Ist ein verwaltetes Verzeichnis zur Speicherung und Beschreibung von digitalen Objekten für ein digitales Archiv. * Data Dictionarys werden mehr und mehr zu Repositories.
Was kann ein modernes Data Dictionary System beinhalten?; * Beschreibungen der Daten * Angaben zu den Beziehungen zwischen den Daten * Beschreibungen der Programme (Transaktionen) * Angaben darüber, welche Programme welche Daten nutzen * Konsistenzbedingungen * Angaben über Zugriffsbefugnisse * Entwurfsdaten (grafische konzeptuelle Modelle, Dokumentation der Entwurfsschritte usw.) * Verantwortlichkeiten * Entwurfsdokumente, Quell-Code zu Anwendungsprogrammen.
Welche Formen der Datenunabhängigkeit gibt es, was bedeuten sie?;* Physische Datenunabhängigkeit<div>- Isolierung der Anwendungsprogramme von Änderungen der physischen Datenorganisation</div><div>- Bedeutet im Drei-Schichten-Architekturmodell: Änderungen am internen Modell lassen konzeptuelles Modell unberührt durch Modifikation der Transformationsregeln. Konzeptuelles Modell bleibt unberührt, dadurch bleiben auch Anwendungsprogramme von Änderungen der Datenorganisation unberührt</div><div>* Logische Datenunabhängigkeit</div><div>- Isolierung der Anwendungsprogramme von Änderungen des konzeptuellen Modells</div><div>- z.B. neue Anwendungen erfordern im konzeptuellen Modell zusätzliche Attribute, neue Beziehungstypen etc.</div><div>- Auch hier wieder Modifikation der Transformationsregeln externes/konzeptuelles Modell müssen angepasst werden</div><div>* Bezogen auf's Binden: Statische vs. Dynamische Datenunabhängigkeit</div><div>* Statisch: Binden zur Übersetzungszeig -- Anwendungsprogramm bleibt nach Änderungen des internen/konzeptuellen Schemas unverändert, muss aber neu übersetzt werden</div><div>* Dynamisch: Datenunabhängigkeit immer gegeben, da die Daten ja zur Zugriffszeit gebunden werden, Neuübersetzung der Anwendungsprogramme ist nicht notwendig</div><div>- Das ist mit hohen Kosten vertreten,bedingt sowohl durch die notwendigen Zugriffe auf die Sche-mata und Tranformationsregeln (E/A-Vorgänge) als auch durch die Interpretation der entsprechenden Einträge zur Laufzeit (CPU-Zeit).</div>
Welche Konstrukte benützt man im ER-Modell?;* <b>Entity</b>: Objekte der realen Welt, zwischen denen gewisse Beziehungen bestehen<div>* <b>Entity-Typ</b>: Repräsentiert die Menge aller Entities, die die gleichen charakteristischen Eigenschaften besitzen -- Ist zugleich Behälter für alle seiner Instanzen (also Entities)</div><div>* <b>Beziehungen</b>: Entities können untereinander in Beziehung stehen</div><div>* <b>Beziehungstypen </b>repräsentieren die Menge aller Beziehungen gleicher Eigenschaften</div><div>* <b>Attribute</b>: Jeder Entity-Typ besitzt Attribute innerhalb eines bestimmten Wertebereichs</div><div>* <b>Attribute für Beziehungstypen</b></div><div>* <b>Schlüssel</b>: Damit Entities voneinander unterscheidbar sind muss es ein Attribut oder eine Menge von Attributen geben, die jede Entity innerhalb eines Entity-Typs identifiziert -- Das ist der Schlüssel für diesen Entity-Typ</div><div>* <b>Primärschlüssel</b>: Gibt es mehrere Schlüssekandidaten für einen Entity-Typ wird einer von ihnen als Primärschlüssel ausgezeichnet</div><div>* <b>Komplexität von Beziehungstypen</b>: Art des Beziehungstyps, kann ein Entity vom Typ [$]E_1[/$] nur mit einer oder mit vielen Entites vom Typ [$]E_2[/$] in Beziehung stehen</div><div>- <b>1:1- Beziehungstyp</b>: Jeder Entity [$]e \in E_2[/$] ist höchstens eine Entity [$]e' \in E_1[/$] zugeordnet, jeder Entity [$]e \in E_1[/$] höchstens eine Entity [$]e' \in E_2[/$]</div><div>- <b>n:1-Beziehung</b>: Jeder Entity e vom Typ [$]E_2[/$] ist keiner, einer oder mehreren Entities vom Typ[$]E_1[/$] zugeordnet, aber jede Entity vom Typ [$]E_1[/$] steht in Beziehung zu höchstens einer Entity vom Typ [$]E_2[/$]</div><div>- <b>n:m-Beziehung</b>: Jeder Entity e vom Typ [$]E_2[/$] ist keiner, einer oder mehreren Entities vom Typ[$]E_1[/$] zugeordnet und jede Entity vom Typ [$]E_1[/$] steht in Beziehung zu keiner, einer oder mehreren Entities vom Typ [$]E_2[/$] -- kompliziertestes Beziehung, welche nicht von allen Datenmodellen unmittelbar ausgedrückt werden kann</div><div>* <b>Schwache Entity-Typen</b>: Wenn Entity nicht durch seine eigenen Attribute identifiziert werden kann, sondern Identifizierung nur durch Ausnutzung einer Beziehung möglich ist -- KIND(Name, Alter), ANGESTELLTE(PersNr, Name, Alter), Beziehungstyp VATER-VON(ANGESTELLTE, KIND)</div><div>* <b>Schwache Beziehungstypen</b>: Beziehungstypen, an denen ein schwacher Entity-Typ teilnimmt</div>.
Wie charakterisiert man Beziehungstypen?;* Sei [$]B[/$]ein Beziehungstyp zwischen Entity-Typen [$]E_1[/$] und [$]E_2[/$], so stehen Entitites vom Typ [$]E_1[/$] in Beziehung B zu Entities vom Typ [$]E_2[/$]<div>* B steht für eine Menge von Beziehungen</div><div>* Ein Beziehungstyp kann mehrere Entity-Typen umfassen: [$]B(E_1, E_2, ..., E_k[/$]</div><div>* Jedes k-Tupel [$](e_1, e_2, ..., e_k)[/$] in der Menge B beschreibt <b>eine konkrete Beziehung</b>zwischen <b>den Entities</b>[$]e_1, ..., e_k[/$]</div><div>* Die Entity-Typen in der Liste [$]E_1, ..., E_k[/$] müssen nicht unterschiedlich sein</div><div>* Beziehungen sind nicht gerichtet</div>.
Was ist zu tun, wenn ein neues Attribut hinzugefügt oder ein altes Attribut entfernt wird?;Beide Änderungen müssen durch die Transformationsregeln abgefangen werden. Beim Entfernen müssen zudem Prozeduren, Funktionen, Trigger, Cursor und Anwendungsprogramme angepasst werden, falls sie das Attribut abfragen.